//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.12.14 at 02:10:49 PM IST 
//


package generated;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Debit">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="AccNumber" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="Mobile" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="Amount" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="Credit">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="AccNumber" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="Mobile" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                   &lt;element name="Amount" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="username" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="password" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "debit",
    "credit",
    "username",
    "password"
})
@XmlRootElement(name = "PayTxn")
public class PayTxn
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "Debit", required = true)
    protected PayTxn.Debit debit;
    @XmlElement(name = "Credit", required = true)
    protected PayTxn.Credit credit;
    @XmlElement(required = true)
    protected String username;
    @XmlElement(required = true)
    protected String password;

    /**
     * Gets the value of the debit property.
     * 
     * @return
     *     possible object is
     *     {@link PayTxn.Debit }
     *     
     */
    public PayTxn.Debit getDebit() {
        return debit;
    }

    /**
     * Sets the value of the debit property.
     * 
     * @param value
     *     allowed object is
     *     {@link PayTxn.Debit }
     *     
     */
    public void setDebit(PayTxn.Debit value) {
        this.debit = value;
    }

    /**
     * Gets the value of the credit property.
     * 
     * @return
     *     possible object is
     *     {@link PayTxn.Credit }
     *     
     */
    public PayTxn.Credit getCredit() {
        return credit;
    }

    /**
     * Sets the value of the credit property.
     * 
     * @param value
     *     allowed object is
     *     {@link PayTxn.Credit }
     *     
     */
    public void setCredit(PayTxn.Credit value) {
        this.credit = value;
    }

    /**
     * Gets the value of the username property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUsername() {
        return username;
    }

    /**
     * Sets the value of the username property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUsername(String value) {
        this.username = value;
    }

    /**
     * Gets the value of the password property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the value of the password property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPassword(String value) {
        this.password = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            PayTxn.Debit theDebit;
            theDebit = this.getDebit();
            strategy.appendField(locator, this, "debit", buffer, theDebit);
        }
        {
            PayTxn.Credit theCredit;
            theCredit = this.getCredit();
            strategy.appendField(locator, this, "credit", buffer, theCredit);
        }
        {
            String theUsername;
            theUsername = this.getUsername();
            strategy.appendField(locator, this, "username", buffer, theUsername);
        }
        {
            String thePassword;
            thePassword = this.getPassword();
            strategy.appendField(locator, this, "password", buffer, thePassword);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PayTxn)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PayTxn that = ((PayTxn) object);
        {
            PayTxn.Debit lhsDebit;
            lhsDebit = this.getDebit();
            PayTxn.Debit rhsDebit;
            rhsDebit = that.getDebit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "debit", lhsDebit), LocatorUtils.property(thatLocator, "debit", rhsDebit), lhsDebit, rhsDebit)) {
                return false;
            }
        }
        {
            PayTxn.Credit lhsCredit;
            lhsCredit = this.getCredit();
            PayTxn.Credit rhsCredit;
            rhsCredit = that.getCredit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "credit", lhsCredit), LocatorUtils.property(thatLocator, "credit", rhsCredit), lhsCredit, rhsCredit)) {
                return false;
            }
        }
        {
            String lhsUsername;
            lhsUsername = this.getUsername();
            String rhsUsername;
            rhsUsername = that.getUsername();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "username", lhsUsername), LocatorUtils.property(thatLocator, "username", rhsUsername), lhsUsername, rhsUsername)) {
                return false;
            }
        }
        {
            String lhsPassword;
            lhsPassword = this.getPassword();
            String rhsPassword;
            rhsPassword = that.getPassword();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "password", lhsPassword), LocatorUtils.property(thatLocator, "password", rhsPassword), lhsPassword, rhsPassword)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            PayTxn.Debit theDebit;
            theDebit = this.getDebit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "debit", theDebit), currentHashCode, theDebit);
        }
        {
            PayTxn.Credit theCredit;
            theCredit = this.getCredit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "credit", theCredit), currentHashCode, theCredit);
        }
        {
            String theUsername;
            theUsername = this.getUsername();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "username", theUsername), currentHashCode, theUsername);
        }
        {
            String thePassword;
            thePassword = this.getPassword();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "password", thePassword), currentHashCode, thePassword);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PayTxn) {
            final PayTxn copy = ((PayTxn) draftCopy);
            if (this.debit!= null) {
                PayTxn.Debit sourceDebit;
                sourceDebit = this.getDebit();
                PayTxn.Debit copyDebit = ((PayTxn.Debit) strategy.copy(LocatorUtils.property(locator, "debit", sourceDebit), sourceDebit));
                copy.setDebit(copyDebit);
            } else {
                copy.debit = null;
            }
            if (this.credit!= null) {
                PayTxn.Credit sourceCredit;
                sourceCredit = this.getCredit();
                PayTxn.Credit copyCredit = ((PayTxn.Credit) strategy.copy(LocatorUtils.property(locator, "credit", sourceCredit), sourceCredit));
                copy.setCredit(copyCredit);
            } else {
                copy.credit = null;
            }
            if (this.username!= null) {
                String sourceUsername;
                sourceUsername = this.getUsername();
                String copyUsername = ((String) strategy.copy(LocatorUtils.property(locator, "username", sourceUsername), sourceUsername));
                copy.setUsername(copyUsername);
            } else {
                copy.username = null;
            }
            if (this.password!= null) {
                String sourcePassword;
                sourcePassword = this.getPassword();
                String copyPassword = ((String) strategy.copy(LocatorUtils.property(locator, "password", sourcePassword), sourcePassword));
                copy.setPassword(copyPassword);
            } else {
                copy.password = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PayTxn();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="AccNumber" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="Mobile" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="Amount" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "accNumber",
        "mobile",
        "amount"
    })
    public static class Credit
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AccNumber", required = true)
        protected String accNumber;
        @XmlElement(name = "Mobile", required = true)
        protected String mobile;
        @XmlElement(name = "Amount", required = true)
        protected String amount;

        /**
         * Gets the value of the accNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAccNumber() {
            return accNumber;
        }

        /**
         * Sets the value of the accNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAccNumber(String value) {
            this.accNumber = value;
        }

        /**
         * Gets the value of the mobile property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMobile() {
            return mobile;
        }

        /**
         * Sets the value of the mobile property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setMobile(String value) {
            this.mobile = value;
        }

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAmount(String value) {
            this.amount = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theAccNumber;
                theAccNumber = this.getAccNumber();
                strategy.appendField(locator, this, "accNumber", buffer, theAccNumber);
            }
            {
                String theMobile;
                theMobile = this.getMobile();
                strategy.appendField(locator, this, "mobile", buffer, theMobile);
            }
            {
                String theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PayTxn.Credit)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PayTxn.Credit that = ((PayTxn.Credit) object);
            {
                String lhsAccNumber;
                lhsAccNumber = this.getAccNumber();
                String rhsAccNumber;
                rhsAccNumber = that.getAccNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "accNumber", lhsAccNumber), LocatorUtils.property(thatLocator, "accNumber", rhsAccNumber), lhsAccNumber, rhsAccNumber)) {
                    return false;
                }
            }
            {
                String lhsMobile;
                lhsMobile = this.getMobile();
                String rhsMobile;
                rhsMobile = that.getMobile();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "mobile", lhsMobile), LocatorUtils.property(thatLocator, "mobile", rhsMobile), lhsMobile, rhsMobile)) {
                    return false;
                }
            }
            {
                String lhsAmount;
                lhsAmount = this.getAmount();
                String rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theAccNumber;
                theAccNumber = this.getAccNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accNumber", theAccNumber), currentHashCode, theAccNumber);
            }
            {
                String theMobile;
                theMobile = this.getMobile();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mobile", theMobile), currentHashCode, theMobile);
            }
            {
                String theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PayTxn.Credit) {
                final PayTxn.Credit copy = ((PayTxn.Credit) draftCopy);
                if (this.accNumber!= null) {
                    String sourceAccNumber;
                    sourceAccNumber = this.getAccNumber();
                    String copyAccNumber = ((String) strategy.copy(LocatorUtils.property(locator, "accNumber", sourceAccNumber), sourceAccNumber));
                    copy.setAccNumber(copyAccNumber);
                } else {
                    copy.accNumber = null;
                }
                if (this.mobile!= null) {
                    String sourceMobile;
                    sourceMobile = this.getMobile();
                    String copyMobile = ((String) strategy.copy(LocatorUtils.property(locator, "mobile", sourceMobile), sourceMobile));
                    copy.setMobile(copyMobile);
                } else {
                    copy.mobile = null;
                }
                if (this.amount!= null) {
                    String sourceAmount;
                    sourceAmount = this.getAmount();
                    String copyAmount = ((String) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PayTxn.Credit();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="AccNumber" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="Mobile" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *         &lt;element name="Amount" type="{http://www.w3.org/2001/XMLSchema}string"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "accNumber",
        "mobile",
        "amount"
    })
    public static class Debit
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AccNumber", required = true)
        protected String accNumber;
        @XmlElement(name = "Mobile", required = true)
        protected String mobile;
        @XmlElement(name = "Amount", required = true)
        protected String amount;

        /**
         * Gets the value of the accNumber property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAccNumber() {
            return accNumber;
        }

        /**
         * Sets the value of the accNumber property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAccNumber(String value) {
            this.accNumber = value;
        }

        /**
         * Gets the value of the mobile property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getMobile() {
            return mobile;
        }

        /**
         * Sets the value of the mobile property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setMobile(String value) {
            this.mobile = value;
        }

        /**
         * Gets the value of the amount property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getAmount() {
            return amount;
        }

        /**
         * Sets the value of the amount property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setAmount(String value) {
            this.amount = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theAccNumber;
                theAccNumber = this.getAccNumber();
                strategy.appendField(locator, this, "accNumber", buffer, theAccNumber);
            }
            {
                String theMobile;
                theMobile = this.getMobile();
                strategy.appendField(locator, this, "mobile", buffer, theMobile);
            }
            {
                String theAmount;
                theAmount = this.getAmount();
                strategy.appendField(locator, this, "amount", buffer, theAmount);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PayTxn.Debit)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PayTxn.Debit that = ((PayTxn.Debit) object);
            {
                String lhsAccNumber;
                lhsAccNumber = this.getAccNumber();
                String rhsAccNumber;
                rhsAccNumber = that.getAccNumber();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "accNumber", lhsAccNumber), LocatorUtils.property(thatLocator, "accNumber", rhsAccNumber), lhsAccNumber, rhsAccNumber)) {
                    return false;
                }
            }
            {
                String lhsMobile;
                lhsMobile = this.getMobile();
                String rhsMobile;
                rhsMobile = that.getMobile();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "mobile", lhsMobile), LocatorUtils.property(thatLocator, "mobile", rhsMobile), lhsMobile, rhsMobile)) {
                    return false;
                }
            }
            {
                String lhsAmount;
                lhsAmount = this.getAmount();
                String rhsAmount;
                rhsAmount = that.getAmount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "amount", lhsAmount), LocatorUtils.property(thatLocator, "amount", rhsAmount), lhsAmount, rhsAmount)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theAccNumber;
                theAccNumber = this.getAccNumber();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accNumber", theAccNumber), currentHashCode, theAccNumber);
            }
            {
                String theMobile;
                theMobile = this.getMobile();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mobile", theMobile), currentHashCode, theMobile);
            }
            {
                String theAmount;
                theAmount = this.getAmount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amount", theAmount), currentHashCode, theAmount);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PayTxn.Debit) {
                final PayTxn.Debit copy = ((PayTxn.Debit) draftCopy);
                if (this.accNumber!= null) {
                    String sourceAccNumber;
                    sourceAccNumber = this.getAccNumber();
                    String copyAccNumber = ((String) strategy.copy(LocatorUtils.property(locator, "accNumber", sourceAccNumber), sourceAccNumber));
                    copy.setAccNumber(copyAccNumber);
                } else {
                    copy.accNumber = null;
                }
                if (this.mobile!= null) {
                    String sourceMobile;
                    sourceMobile = this.getMobile();
                    String copyMobile = ((String) strategy.copy(LocatorUtils.property(locator, "mobile", sourceMobile), sourceMobile));
                    copy.setMobile(copyMobile);
                } else {
                    copy.mobile = null;
                }
                if (this.amount!= null) {
                    String sourceAmount;
                    sourceAmount = this.getAmount();
                    String copyAmount = ((String) strategy.copy(LocatorUtils.property(locator, "amount", sourceAmount), sourceAmount));
                    copy.setAmount(copyAmount);
                } else {
                    copy.amount = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PayTxn.Debit();
        }

    }

}
